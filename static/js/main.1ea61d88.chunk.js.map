{"version":3,"sources":["App.js","actions/contacts_actions.js","serviceWorker.js","reducers/contacts_reducer.js","index.js"],"names":["ContactManager","React","lazy","mapDispatchToProps","addContact","newContact","type","deleteContact","id","updateContacts","newContacts","connect","store","contacts","props","fallback","dispatchAddContact","dispatchDeleteContact","dispatchUpdateContacts","Boolean","window","location","hostname","match","initialState","createStore","state","action","splice","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kSAMA,IAAMA,EAAiBC,IAAMC,MAAK,kBAAM,sDAuBxC,IAAMC,EAAqB,CACzBC,WC9BK,SAAoBC,GACvB,MAAO,CACHC,KAAM,cACND,WAAYA,ID4BlBE,cCzBK,SAAuBC,GAC1B,MAAO,CACHF,KAAM,iBACNE,GAAIA,IDuBVC,eCpBK,SAAwBC,GAC3B,MAAO,CACHJ,KAAM,kBACNI,YAAaA,KDoBNC,eAZf,SAAyBC,GACvB,MAAO,CACLC,SAAUD,EAAMC,YAUoBV,EAAzBQ,EA3Bf,SAAaG,GACX,OACE,6BACE,kBAAC,WAAD,CAAUC,SAAU,4CAClB,kBAACf,EAAD,CACEa,SAAUC,EAAMD,SAChBG,mBAAoBF,EAAMV,WAC1Ba,sBAAuBH,EAAMP,cAC7BW,uBAAwBJ,EAAML,sBEJpBU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,wBClBAC,EAAe,CACjBX,SAAU,CAAC,kBCWf,IAAMD,EAAQa,aDTP,WAAyD,IAA/BC,EAA8B,uDAAtBF,EAAcG,EAAQ,uCAC3D,OAAQA,EAAOrB,MACb,IAAK,cACH,MAAO,CAAEO,SAAS,GAAD,mBAAMa,EAAMb,UAAZ,CAAsBc,EAAOtB,cAChD,IAAK,iBACH,IAAIK,EAAW,YAAOgB,EAAMb,UAE5B,OADAH,EAAYkB,OAAOD,EAAOnB,GAAI,GACvB,CAAEK,SAAS,YAAKH,IACzB,IAAK,kBACH,MAAO,CAAEG,SAAS,YAAKc,EAAOjB,cAChC,QACE,OAAOgB,MCAfG,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUnB,MAAOA,GACf,kBAAC,EAAD,QAGJoB,SAASC,eAAe,SF+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1ea61d88.chunk.js","sourcesContent":["import React, { Suspense } from 'react';\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { addContact, deleteContact, updateContacts } from './actions/contacts_actions';\r\n\r\nconst ContactManager = React.lazy(() => import('./components/contact_manager/ContactManager'));\r\n\r\nfunction App(props) {\r\n  return (\r\n    <div>\r\n      <Suspense fallback={<div>Loading...</div>}>\r\n        <ContactManager\r\n          contacts={props.contacts}\r\n          dispatchAddContact={props.addContact}\r\n          dispatchDeleteContact={props.deleteContact}\r\n          dispatchUpdateContacts={props.updateContacts}\r\n        />\r\n      </Suspense>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction mapStateToProps(store) {\r\n  return {\r\n    contacts: store.contacts\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  addContact,\r\n  deleteContact,\r\n  updateContacts\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","export function addContact(newContact) {\r\n    return {\r\n        type: 'ADD_CONTACT',\r\n        newContact: newContact\r\n    }\r\n}\r\nexport function deleteContact(id) {\r\n    return {\r\n        type: 'DELETE_CONTACT',\r\n        id: id\r\n    }\r\n}\r\nexport function updateContacts(newContacts) {\r\n    return {\r\n        type: 'UPDATE_CONTACTS',\r\n        newContacts: newContacts\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\r\n    contacts: [\"First Contact\"],\r\n  };\r\nexport function contacts_reducer(state = initialState, action) {\r\n    switch (action.type) {\r\n      case 'ADD_CONTACT':\r\n        return { contacts: [...state.contacts, action.newContact] };\r\n      case 'DELETE_CONTACT':\r\n        let newContacts = [...state.contacts];\r\n        newContacts.splice(action.id, 1);\r\n        return { contacts: [...newContacts] };\r\n      case 'UPDATE_CONTACTS':\r\n        return { contacts: [...action.newContacts] };\r\n      default:\r\n        return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\n\nimport {contacts_reducer} from './reducers/contacts_reducer';\n\nconst store = createStore(contacts_reducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}